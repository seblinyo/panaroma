dem,
routes4$lat,
routes4$lon,
800,
line_width = 5,
clamp_to_ground = TRUE,
lightsaber = FALSE,
zscale = raster_zscale(dem),
ground_shadow = FALSE,
colour = "purple"
)
add_gps_to_rayshader(
dem,
routes5$lat,
routes5$lon,
800,
line_width = 5,
clamp_to_ground = TRUE,
lightsaber = FALSE,
zscale = raster_zscale(dem),
ground_shadow = FALSE,
colour = "purple"
)
add_gps_to_rayshader(
dem,
routes6$lat,
routes6$lon,
800,
line_width = 5,
clamp_to_ground = TRUE,
lightsaber = FALSE,
zscale = raster_zscale(dem),
ground_shadow = FALSE,
colour = "purple"
)
add_gps_to_rayshader(
dem,
routes7$lat,
routes7$lon,
800,
line_width = 5,
lightsaber = FALSE,
clamp_to_ground = TRUE,
zscale = raster_zscale(dem),
ground_shadow = FALSE,
colour = "purple"
)
add_gps_to_rayshader(
dem,
routes8$lat,
routes8$lon,
800,
line_width = 5,
lightsaber = FALSE,
clamp_to_ground = TRUE,
zscale = raster_zscale(dem),
ground_shadow = FALSE,
colour = "purple"
)
add_gps_to_rayshader(
dem,
routes9$lat,
routes9$lon,
800,
line_width = 5,
lightsaber = FALSE,
clamp_to_ground = TRUE,
zscale = raster_zscale(dem),
ground_shadow = FALSE,
colour = "purple"
)
add_gps_to_rayshader(
dem,
routes10$lat,
routes10$lon,
800,
line_width = 5,
lightsaber = FALSE,
clamp_to_ground = TRUE,
zscale = raster_zscale(dem),
ground_shadow = FALSE,
colour = "purple"
)
add_gps_to_rayshader(
dem,
routes11$lat,
routes11$lon,
800,
line_width = 5,
lightsaber = FALSE,
clamp_to_ground = TRUE,
zscale = raster_zscale(dem),
ground_shadow = FALSE,
colour = "purple"
)
add_gps_to_rayshader(
dem,
routes12$lat,
routes12$lon,
800,
line_width = 5,
lightsaber = FALSE,
clamp_to_ground = TRUE,
zscale = raster_zscale(dem),
ground_shadow = FALSE,
colour = "purple"
)
add_gps_to_rayshader(
dem,
routes13$lat,
routes13$lon,
800,
line_width = 5,
lightsaber = FALSE,
clamp_to_ground = TRUE,
zscale = raster_zscale(dem),
ground_shadow = FALSE,
colour = "purple"
)
add_gps_to_rayshader(
dem,
routes14$lat,
routes14$lon,
800,
line_width = 5,
lightsaber = FALSE,
clamp_to_ground = TRUE,
zscale = raster_zscale(dem),
ground_shadow = FALSE,
colour = "purple"
)
add_gps_to_rayshader(
dem,
routes15$lat,
routes15$lon,
800,
line_width = 4,
lightsaber = FALSE,
clamp_to_ground = TRUE,
zscale = raster_zscale(dem),
ground_shadow = FALSE,
colour = "purple"
)
rayshader::render_label(
elmat,
x = 718,
y = 150,
z = 1000,
zscale = raster_zscale(dem),
freetype = FALSE,
text = "Hauser Kaibling (2015m)",
textsize = 2,
dashed = TRUE,
linewidth = 3
)
rayshader::render_label(
elmat,
x = 553,
y = 150,
z = 3000,
zscale = raster_zscale(dem),
freetype = FALSE,
text = "Planai (1901m)",
textsize = 2,
dashed = TRUE,
linewidth = 3
)
rayshader::render_label(
elmat,
x = 310,
y = 95,
z = 2000,
zscale = raster_zscale(dem),
freetype = FALSE,
text = "Hochwurzen (1849m)",
textsize = 2,
dashed = TRUE,
linewidth = 3
)
rayshader::render_label(
elmat,
x = 167,
y = 95,
z = 4000,
zscale = raster_zscale(dem),
freetype = FALSE,
text = "Gasselhoehe (2001m)",
textsize = 2,
dashed = TRUE,
linewidth = 3
)
rgl::view3d(theta =200, phi = 38, zoom = 0.75, fov = 5)
#rayshader::render_depth(
#  focus = 0.5,
#  fstop = 18,
#  filename = "scene.png"
#)
library(rayshader)
library(geoviz)
library(plotKML) # for reading GPX files
require(extrafont) # to curl fonts from OS.
library(magick)
require(rgl)
require(gifski)
require(rlang)
# Set the working directory
setwd("C:/Users/sebas/documents/github/panorama/r")
# from https://github.com/wcmbishop/rayshader-demo/blob/master/R/rayshader-gif.R
transition_values <- function(from, to, steps = 10,
one_way = FALSE, type = "cos") {
if (!(type %in% c("cos", "lin")))
stop("type must be one of: 'cos', 'lin'")
range <- c(from, to)
middle <- mean(range)
half_width <- diff(range)/2
# define scaling vector starting at 1 (between 1 to -1)
if (type == "cos") {
scaling <- cos(seq(0, 2*pi / ifelse(one_way, 2, 1), length.out = steps))
} else if (type == "lin") {
if (one_way) {
xout <- seq(1, -1, length.out = steps)
} else {
xout <- c(seq(1, -1, length.out = floor(steps/2)),
seq(-1, 1, length.out = ceiling(steps/2)))
}
scaling <- approx(x = c(-1, 1), y = c(-1, 1), xout = xout)$y
}
middle - half_width * scaling
}
# from https://github.com/wcmbishop/rayshader-demo/blob/master/R/rayshader-gif.R
save_3d_gif <- function(hillshade, heightmap, file, duration = 5, ...) {
# capture dot arguments and extract variables with length > 1 for gif frames
dots <- rlang::list2(...)
var_exception_list <- c("windowsize")
dot_var_lengths <- purrr::map_int(dots, length)
gif_var_names <- names(dots)[dot_var_lengths > 1 &
!(names(dots) %in% var_exception_list)]
# split off dot variables to use on gif frames
gif_dots <- dots[gif_var_names]
static_dots <- dots[!(names(dots) %in% gif_var_names)]
gif_var_lengths <- purrr::map_int(gif_dots, length)
# build expressions for gif variables that include index 'i' (to use in the for loop)
gif_expr_list <- purrr::map(names(gif_dots), ~rlang::expr(gif_dots[[!!.x]][i]))
gif_exprs <- exprs(!!!gif_expr_list)
names(gif_exprs) <- names(gif_dots)
message(paste("gif variables found:", paste(names(gif_dots), collapse = ", ")))
# TODO - can we recycle short vectors?
if (length(unique(gif_var_lengths)) > 1)
stop("all gif input vectors must be the same length")
n_frames <- unique(gif_var_lengths)
# generate temp .png images
temp_dir <- tempdir()
img_frames <- file.path(temp_dir, paste0("frame-", seq_len(n_frames), ".png"))
on.exit(unlink(img_frames))
message(paste("Generating", n_frames, "temporary .png images..."))
for (i in seq_len(n_frames)) {
message(paste(" - image", i, "of", n_frames))
rgl::clear3d()
hillshade %>%
plot_3d_tidy_eval(heightmap, !!!append(gif_exprs, static_dots))
rgl::snapshot3d(img_frames[i])
}
# build gif
message("Generating .gif...")
magick::image_write_gif(magick::image_read(img_frames),
path = file, delay = duration/n_frames)
message("Done!")
invisible(file)
}
plot_3d_tidy_eval <- function(hillshade, ...) {
dots <- rlang::enquos(...)
plot_3d_call <- rlang::expr(plot_3d(hillshade, !!!dots))
rlang::eval_tidy(plot_3d_call)
}
#rgl::clear3d()
# ============DEM =========================== #
#=========================================================#
lat <- 47.394319
long <- 13.687770
square_km <- 6
max_tiles <- 10
#mapbox_key <- "pk.eyJ1Ijoic2ViYXN0aWFuLWNoIiwiYSI6ImNpejkxdzZ5YzAxa2gyd21udGpmaGU0dTgifQ.IrEd_tvrl6MuypVNUGU5SQ"
dem <- mapzen_dem(lat, long, square_km = square_km, max_tiles = max_tiles)
elmat = matrix(
raster::extract(dem, raster::extent(dem), method = 'bilinear'),
nrow = ncol(dem),
ncol = nrow(dem)
)
for(sunangle in 1:360) {
elmat %>%
sphere_shade %>%
add_shadow(ray_shade(elmat,zscale=3,maxsearch = 300, sunangle = sunangle),0.5) %>%
plot_3d(elmat,zscale=10,fov=0,theta=0,zoom=0.75, phi=25, windowsize = c(1000,800))
render_snapshot(filename=paste0("frame",sunangle))
rgl::rgl.clear()
}
png_files <- sprintf("frame%d.png", 1: 360)
av::av_encode_video(png_files, 'output.mp4', framerate = 10)
utils::browseURL('output.mp4')
library(rayshader)
library(geoviz)
library(plotKML) # for reading GPX files
require(extrafont) # to curl fonts from OS.
library(magick)
require(rgl)
require(gifski)
require(rlang)
# Set the working directory
setwd("C:/Users/sebas/documents/github/panorama/r")
#rgl::clear3d()
# ============DEM =========================== #
#=========================================================#
lat <- 47.394319
long <- 13.687770
square_km <- 6
max_tiles <- 10
#mapbox_key <- "pk.eyJ1Ijoic2ViYXN0aWFuLWNoIiwiYSI6ImNpejkxdzZ5YzAxa2gyd21udGpmaGU0dTgifQ.IrEd_tvrl6MuypVNUGU5SQ"
dem <- mapzen_dem(lat, long, square_km = square_km, max_tiles = max_tiles)
elmat = matrix(
raster::extract(dem, raster::extent(dem), method = 'bilinear'),
nrow = ncol(dem),
ncol = nrow(dem)
)
for(sunangle in 1:360) {
elmat %>%
sphere_shade %>%
add_shadow(ray_shade(elmat,raster_zscale(dem),maxsearch = 300, sunangle = sunangle),0.5) %>%
plot_3d(elmat,zscale=raster_zscale(dem),fov=5,theta=200,zoom=0.75, phi=38, windowsize = c(1000,800))
render_snapshot(filename=paste0("frame",sunangle))
rgl::rgl.clear()
}
png_files <- sprintf("frame%d.png", 1: 360)
av::av_encode_video(png_files, 'output.mp4', framerate = 10)
utils::browseURL('output.mp4')
#rgl::view3d(theta =200, phi = 38, zoom = 0.75, fov = 5)
getwd()
library(rayshader)
library(geoviz)
library(plotKML) # for reading GPX files
require(extrafont) # to curl fonts from OS.
library(magick)
require(rgl)
require(gifski)
require(rlang)
# Set the working directory
#setwd("C:/Users/sebas/documents/github/panorama/r")
#rgl::clear3d()
# ============DEM =========================== #
#=========================================================#
lat <- 47.394319
long <- 13.687770
square_km <- 6
max_tiles <- 10
#mapbox_key <- "pk.eyJ1Ijoic2ViYXN0aWFuLWNoIiwiYSI6ImNpejkxdzZ5YzAxa2gyd21udGpmaGU0dTgifQ.IrEd_tvrl6MuypVNUGU5SQ"
dem <- mapzen_dem(lat, long, square_km = square_km, max_tiles = max_tiles)
elmat = matrix(
raster::extract(dem, raster::extent(dem), method = 'bilinear'),
nrow = ncol(dem),
ncol = nrow(dem)
)
for(sunangle in 1:360) {
elmat %>%
sphere_shade %>%
add_shadow(ray_shade(elmat,raster_zscale(dem),maxsearch = 300, sunangle = sunangle),0.5) %>%
plot_3d(elmat,zscale=raster_zscale(dem),fov=5,theta=200,zoom=0.75, phi=38, windowsize = c(1000,800))
render_snapshot(filename=paste0("frame",sunangle))
rgl::rgl.clear()
}
png_files <- sprintf("frame%d.png", 1: 360)
av::av_encode_video(png_files, 'output.mp4', framerate = 10)
utils::browseURL('output.mp4')
library(rayshader)
library(geoviz)
library(plotKML) # for reading GPX files
require(extrafont) # to curl fonts from OS.
library(magick)
require(rgl)
require(gifski)
require(rlang)
# Set the working directory
#setwd("C:/Users/sebas/documents/github/panorama/r")
#rgl::clear3d()
# ============DEM =========================== #
#=========================================================#
lat <- 47.394319
long <- 13.687770
square_km <- 6
max_tiles <- 10
#mapbox_key <- "pk.eyJ1Ijoic2ViYXN0aWFuLWNoIiwiYSI6ImNpejkxdzZ5YzAxa2gyd21udGpmaGU0dTgifQ.IrEd_tvrl6MuypVNUGU5SQ"
dem <- mapzen_dem(lat, long, square_km = square_km, max_tiles = max_tiles)
elmat = matrix(
raster::extract(dem, raster::extent(dem), method = 'bilinear'),
nrow = ncol(dem),
ncol = nrow(dem)
)
for(sunangle in 1:200) {
elmat %>%
sphere_shade %>%
add_shadow(ray_shade(elmat,raster_zscale(dem),maxsearch = 300, sunangle = sunangle),0.5) %>%
plot_3d(elmat,zscale=raster_zscale(dem),fov=5,theta=200,zoom=0.75, phi=38, windowsize = c(1000,800))
render_snapshot(filename=paste0("frame",sunangle))
rgl::rgl.clear()
}
png_files <- sprintf("frame%d.png", 1: 360)
av::av_encode_video(png_files, 'output.mp4', framerate = 10)
utils::browseURL('output.mp4')
library(rayshader)
library(geoviz)
library(plotKML) # for reading GPX files
require(extrafont) # to curl fonts from OS.
library(magick)
require(rgl)
require(gifski)
require(rlang)
# Set the working directory
#setwd("C:/Users/sebas/documents/github/panorama/r")
#rgl::clear3d()
# ============DEM =========================== #
#=========================================================#
lat <- 47.394319
long <- 13.687770
square_km <- 6
max_tiles <- 10
#mapbox_key <- "pk.eyJ1Ijoic2ViYXN0aWFuLWNoIiwiYSI6ImNpejkxdzZ5YzAxa2gyd21udGpmaGU0dTgifQ.IrEd_tvrl6MuypVNUGU5SQ"
dem <- mapzen_dem(lat, long, square_km = square_km, max_tiles = max_tiles)
elmat = matrix(
raster::extract(dem, raster::extent(dem), method = 'bilinear'),
nrow = ncol(dem),
ncol = nrow(dem)
)
for(sunangle in 1:200) {
elmat %>%
sphere_shade %>%
add_shadow(ray_shade(elmat,raster_zscale(dem),maxsearch = 300, sunangle = sunangle),0.5) %>%
plot_3d(elmat,zscale=raster_zscale(dem),fov=5,theta=200,zoom=0.75, phi=38, windowsize = c(1000,800))
render_snapshot(filename=paste0("frame",sunangle))
rgl::rgl.clear()
}
png_files <- sprintf("frame%d.png", 1: 360)
av::av_encode_video(png_files, 'output.mp4', framerate = 10)
utils::browseURL('output.mp4')
getwd()
library(rayshader)
library(geoviz)
library(plotKML) # for reading GPX files
require(extrafont) # to curl fonts from OS.
library(magick)
require(rgl)
require(gifski)
require(rlang)
# Set the working directory
#setwd("C:/Users/sebas/documents/github/panorama/r")
#rgl::clear3d()
# ============DEM =========================== #
#=========================================================#
lat <- 47.394319
long <- 13.687770
square_km <- 6
max_tiles <- 10
#mapbox_key <- "pk.eyJ1Ijoic2ViYXN0aWFuLWNoIiwiYSI6ImNpejkxdzZ5YzAxa2gyd21udGpmaGU0dTgifQ.IrEd_tvrl6MuypVNUGU5SQ"
dem <- mapzen_dem(lat, long, square_km = square_km, max_tiles = max_tiles)
elmat = matrix(
raster::extract(dem, raster::extent(dem), method = 'bilinear'),
nrow = ncol(dem),
ncol = nrow(dem)
)
for(sunangle in 1:200) {
elmat %>%
sphere_shade %>%
add_shadow(ray_shade(elmat,raster_zscale(dem),maxsearch = 300, sunangle = sunangle),0.5) %>%
plot_3d(elmat,zscale=raster_zscale(dem),fov=5,theta=200,zoom=0.75, phi=38, windowsize = c(1000,800))
render_snapshot(filename=paste0("frame",sunangle))
rgl::rgl.clear()
}
png_files <- sprintf("frame%d.png", 1: 360)
av::av_encode_video(png_files, 'output.mp4', framerate = 10)
utils::browseURL('output.mp4')
library(rayshader)
library(geoviz)
library(plotKML) # for reading GPX files
require(extrafont) # to curl fonts from OS.
library(magick)
require(rgl)
require(gifski)
require(rlang)
# Set the working directory
#setwd("C:/Users/sebas/documents/github/panorama/r")
#rgl::clear3d()
# ============DEM =========================== #
#=========================================================#
lat <- 47.394319
long <- 13.687770
square_km <- 6
max_tiles <- 10
#mapbox_key <- "pk.eyJ1Ijoic2ViYXN0aWFuLWNoIiwiYSI6ImNpejkxdzZ5YzAxa2gyd21udGpmaGU0dTgifQ.IrEd_tvrl6MuypVNUGU5SQ"
dem <- mapzen_dem(lat, long, square_km = square_km, max_tiles = max_tiles)
elmat = matrix(
raster::extract(dem, raster::extent(dem), method = 'bilinear'),
nrow = ncol(dem),
ncol = nrow(dem)
)
for(sunangle in 1:200) {
elmat %>%
sphere_shade %>%
add_shadow(ray_shade(elmat,raster_zscale(dem),maxsearch = 300, sunangle = sunangle),0.5) %>%
plot_3d(elmat,zscale=raster_zscale(dem),fov=5,theta=200,zoom=0.75, phi=38, windowsize = c(1000,800))
render_snapshot(filename=paste0("frame",sunangle))
rgl::rgl.clear()
}
png_files <- sprintf("frame%d.png", 1: 360)
av::av_encode_video(png_files, 'output.mp4', framerate = 10)
utils::browseURL('output.mp4')
